# -*- coding: utf-8 -*-
"""Heart_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XW_1-CkVGAHzlQvCnIy7EUF5fa7MRvql
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor, export_graphviz
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import graphviz
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("heart.csv")

# Define regression task: predict 'thalach' based on other features
X_reg = df.drop(columns=['thalach'])  # Use all other columns as features
y_reg = df['thalach']                 # Predict maximum heart rate

# Split data
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(
    X_reg, y_reg, test_size=0.2, random_state=42
)

# Train Decision Tree Regressor
dt_reg = DecisionTreeRegressor(max_depth=3, random_state=42)
dt_reg.fit(X_train_reg, y_train_reg)

# Predict and evaluate
y_pred_dt_reg = dt_reg.predict(X_test_reg)
print("Decision Tree Regressor MSE:", mean_squared_error(y_test_reg, y_pred_dt_reg))
print("R² Score:", r2_score(y_test_reg, y_pred_dt_reg))

# Visualize the tree
dot_data = export_graphviz(dt_reg, out_file=None,
                           feature_names=X_reg.columns,
                           filled=True, rounded=True)
graph = graphviz.Source(dot_data)
graph.render("decision_tree_regression")  # Save to file
graph.view()

# Train Random Forest Regressor
rf_reg = RandomForestRegressor(n_estimators=100, random_state=42)
rf_reg.fit(X_train_reg, y_train_reg)

# Predict and evaluate
y_pred_rf_reg = rf_reg.predict(X_test_reg)
print("\nRandom Forest Regressor MSE:", mean_squared_error(y_test_reg, y_pred_rf_reg))
print("R² Score:", r2_score(y_test_reg, y_pred_rf_reg))

# Feature Importances
plt.figure(figsize=(10,6))
plt.barh(X_reg.columns, rf_reg.feature_importances_)
plt.xlabel("Importance")
plt.title("Feature Importances (Random Forest - Regression)")
plt.show()